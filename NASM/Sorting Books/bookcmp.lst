     1                                  ; File: bookcmp.asm
     2                                  ;
     3                                  ;Defines the bookcmp subroutine for use by the sort algorithm in sort_books.c
     4                                  ;
     5                                  %define AUTHOR_OFFSET 0
     6                                  %define TITLE_OFFSET 21
     7                                  %define SUBJECT_OFFSET 54
     8                                  %define YEAR_OFFSET 68
     9                                  	
    10                                  
    11                                          SECTION .text                   ; Code section.
    12                                          global  bookcmp                 ; let loader see entry point
    13                                  
    14                                  bookcmp: 
    15 00000000 55                      	push	ebp			; push registers we want to use
    16                                  
    17 00000001 89E5                    	mov	ebp, esp
    18                                  	
    19 00000003 57                      	push	edi
    20 00000004 56                      	push	esi
    21                                  
    22 00000005 8B4D08                  	mov	ecx, [ebp + 8]		; get the pointer to the first book
    23 00000008 8B550C                  	mov	edx, [ebp + 12]		; get the pointer to the second book
    24                                  
    25 0000000B 8B4144                  	mov	eax, [ecx + YEAR_OFFSET]; fetch book1's year field
    26 0000000E 2B4244                  	sub	eax, [edx + YEAR_OFFSET]; and "compare" the to book2's year
    27 00000011 752A                    	jnz	allDone			; If they're different, we're done
    28                                  					; with comparisons
    29                                  
    30                                  cmpTitles:				; Fall through to here if years same
    31                                  	;; Following could also be done using "lea" instruction
    32 00000013 89CF                    	mov	edi, ecx		; Get address of book1's title
    33 00000015 81C715000000            	add	edi, TITLE_OFFSET
    34 0000001B 89D6                    	mov	esi, edx		; Get address of book2's title
    35 0000001D 81C615000000            	add	esi, TITLE_OFFSET
    36 00000023 B800000000              	mov	eax, 0			; Pre-clear all 32 bits of eax
    37                                  
    38 00000028 8A07                    L1:	mov	al, [edi]		; Fetch next char of book1's title
    39 0000002A 2A06                    	sub	al, [esi]		; and compare it to matching char in
    40                                  					; book 2
    41 0000002C 750C                    	jne	titleCmpDone		; If we find a difference, we are done
    42                                  					; (note this also works if one string
    43                                  					; or other at NULL)
    44                                  
    45                                  	;; So far, all chars equal; see if we are at end (i.e., check for NULL)
    46 0000002E 803F00                  	cmp	byte [edi], 0
    47 00000031 7407                    	je	titleCmpDone
    48 00000033 47                      	inc	edi
    49 00000034 46                      	inc	esi
    50 00000035 E9EEFFFFFF              	jmp	L1
    51                                  
    52                                  titleCmpDone:
    53 0000003A 0FBEC0                  	movsx	eax, al			; need to convert 8-bit to full 32-bit
    54                                  
    55                                  allDone:				; Clean up and finish
    56                                  	;; Note that eax already has an appropriate value <0, =0, or >0
    57 0000003D 5E                      	pop	esi
    58 0000003E 5F                      	pop	edi
    59 0000003F 5D                      	pop	ebp
    60 00000040 C3                      	ret
